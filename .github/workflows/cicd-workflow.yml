name: AWS ECS Deployment CI/CD

on:
  push:
    branches: [prod]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.20.x"

      - name: Install dependencies
        run: yarn install

      - name: Set up environment variables
        run: echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV

      - name: Run tests
        run: yarn test

      - name: Check if tests passed
        id: test-check
        run: echo "Tests passed"

      - name: Login to Amazon ECR
        if: steps.test-check.outcome == 'success'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        if: steps.test-check.outcome == 'success'
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          REPOSITORY: content-app
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: steps.test-check.outcome == 'success'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: content-app-task-definition.json
          container-name: content-app
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        if: steps.test-check.outcome == 'success'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: content-app-service
          cluster: ${{ secrets.CLUSTER }}
          wait-for-service-stability: true
